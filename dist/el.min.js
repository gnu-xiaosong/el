var El = (function() {
    return (() => {
        "use strict";
        var e = {
                690: (e) => {
                    var r;

                    function t(e) {
                        var r,
                            t = !0,
                            a = !1,
                            i = void 0;
                        try {
                            for (
                                var l, p = n[Symbol.iterator](); !(t = (l = p.next()).done); t = !0
                            ) {
                                var o = l.value,
                                    s = !0,
                                    c = !1,
                                    u = void 0;
                                try {
                                    for (
                                        var d, g = o.reg_array[Symbol.iterator](); !(s = (d = g.next()).done); s = !0
                                    ) {
                                        var f = d.value;
                                        r = new RegExp(f).test(e) ?
                                            (e = o.parse_generate(e, f)) :
                                            e;
                                    }
                                } catch (e) {
                                    (c = !0), (u = e);
                                } finally {
                                    try {
                                        !s && g.return && g.return();
                                    } finally {
                                        if (c) throw u;
                                    }
                                }
                            }
                        } catch (e) {
                            (a = !0), (i = e);
                        } finally {
                            try {
                                !t && p.return && p.return();
                            } finally {
                                if (a) throw i;
                            }
                        }
                        return r;
                    }
                    var a = [{
                                pre_label: "^#{1,6}\\s+",
                                description: "",
                                example: "# 这是一个级标题",
                                parse: function(e) {
                                    var t = e.pre_label.length;
                                    return (
                                        (r = e.data.replace(/#+\s+/, "")), { pre_label: e.pre_label, length: t, data: r }
                                    );
                                },
                                generate: function(e) {
                                    var r =
                                        "<h" + e.length + ">" + e.data + "</h" + e.length + ">";
                                    return (this.example = "# 这是" + e.length + "级标题"), r;
                                },
                                parse_generate: function(e) {
                                    var r = this.parse(e);
                                    return this.generate(r);
                                },
                            },
                            {
                                pre_label: "^p{1,6}\\s+",
                                description: "",
                                example: "# 这是一个段落",
                                parse: function(e) {
                                    return (
                                        e.pre_label.length,
                                        (r = e.data.replace(/p+\s+/, "")), { pre_label: e.pre_label, data: r }
                                    );
                                },
                                generate: function(e) {
                                    return "<p>" + e.data + "</p>";
                                },
                                parse_generate: function(e) {
                                    var r = this.parse(e);
                                    return this.generate(r);
                                },
                            },
                            {
                                pre_label: "^\\*\\s+.*",
                                description: "",
                                example: "* 这是一个列表",
                                parse: function(e) {
                                    return (
                                        (r = e.data.replace(/\*\s+/, "")), { pre_label: e.pre_label, data: r }
                                    );
                                },
                                generate: function(e) {
                                    var r = '<li style="margin-left:42px">' + e.data + "</li>";
                                    return (this.example = "* 这是列表"), r;
                                },
                                parse_generate: function(e) {
                                    var r = this.parse(e);
                                    return this.generate(r);
                                },
                            },
                            {
                                pre_label: "^t:\\s*",
                                description: "表格",
                                example: "\n        table:\n            -1  2  4  5  6\n            -3  3  3  4  4\n            -1  4  4  5  7\n        ",
                                parse: function(e) {
                                    return (
                                        (r = e.data.replace(/^t:\s*/, "")), { pre_label: e.pre_label, data: r }
                                    );
                                },
                                generate: function(e) {
                                    for (
                                        var r, t = "", a = e.data.split("-"), n = 0, i = 0; i < a.length; i++
                                    )
                                        if (0 != a[i].length) {
                                            r = "";
                                            for (
                                                var l = a[i]
                                                    .replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "")
                                                    .split(" "),
                                                    p = 0; p < l.length; p++
                                            )
                                                (r +=
                                                    1 == n || 0 == n ?
                                                    "<th>" + l[p] + "</th>" :
                                                    "<td>" + l[p] + "</td>"),
                                                (n = 2);
                                            t += "<tr>" + r + "</tr>";
                                        } else n = 1;
                                    return (
                                        '<table align="center" cellpadding="20" cellspacing="0" width="500" border="1">' +
                                        t +
                                        "</table>"
                                    );
                                },
                                parse_generate: function(e) {
                                    var r = this.parse(e);
                                    return this.generate(r);
                                },
                            },
                            {
                                pre_label: "^>\\s+(.*)",
                                description: "引用语法",
                                example: "> 引用",
                                parse: function(e) {
                                    return (
                                        (r = e.data.replace(/^>\s+/, "")), { pre_label: e.pre_label, data: r }
                                    );
                                },
                                generate: function(e) {
                                    return (
                                        '<blockquote>\n                              <div style="display: inline-block;background-color:#DFE2E5;width: 5px;text-indent: 2em;">\n                                        <div style="padding: 6px;color: #999;font-size: 1rem;">\n                                         ' +
                                        e.data +
                                        "\n                                        </div>\n                                   </div>\n                            </blockquote>"
                                    );
                                },
                                parse_generate: function(e) {
                                    var r = this.parse(e);
                                    return this.generate(r);
                                },
                            },
                        ],
                        n = [{
                                reg_array: ["^[-*]{3,}$|^分割线$"],
                                description: "三个及其以上的连续-或*或中文 分割线   后面不能有空格",
                                example: "-------- 或 *********  或 分割线",
                                parse_generate: function(e, r) {
                                    return '<hr style="margin:19px"> ';
                                },
                            },
                            {
                                reg_array: [
                                    "\\/(.+)\\/",
                                    "\\*\\*(.+)\\*\\*",
                                    "~~(.+)~~",
                                    "__(.+)__",
                                    "\\^(.+)",
                                    "(.+)\\^",
                                ],
                                html_generate_array: [
                                    "<i>text</i>",
                                    "<strong>text</strong>",
                                    "<del>text</del>",
                                    "<ins>text</ins>",
                                    "<sup>text</sup>",
                                    " <sub>text</sub>",
                                ],
                                description: "[斜体，加粗，删除线, 下划线,上标，下标]",
                                example: "/斜体/",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t);
                                    console.log(a);
                                    var n = this.html_generate_array[
                                        this.reg_array.indexOf(r)
                                    ].replace("text", a[1]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: ["<%(.*)>(.+)<(.*)%>"],
                                html_generate_array: ['<font color="#" size="&">text</font>'],
                                description: "[字体颜色和大小，]",
                                example: "",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t),
                                        n = this.html_generate_array[this.reg_array.indexOf(r)]
                                        .replace("text", a[2])
                                        .replace("#", a[1])
                                        .replace("&", a[3]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: ["```([\\s\\S]*)```"],
                                html_generate_array: [
                                    '<pre style="background-color: rgb(252, 252, 252); border: 1px solid rgb(225, 225, 232);"><code>text</code></pre >',
                                ],
                                description: "[代码片段]",
                                example: "",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t),
                                        n = this.html_generate_array[
                                            this.reg_array.indexOf(r)
                                        ].replace("text", a[1]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: ["\\(#(.+)\\)"],
                                html_generate_array: ['<div id="#id#"></div>'],
                                description: "[代码片段]",
                                example: "",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t),
                                        n = this.html_generate_array[
                                            this.reg_array.indexOf(r)
                                        ].replace("#id#", a[1]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: ["<#(.*)-(.+)"],
                                html_generate_array: [
                                    '<a href="#id" style=" text-decoration: none;">{text}</a>',
                                ],
                                description: "[锚点链接, 锚点注入点id默认div包裹]",
                                example: "<#id-链接>",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t),
                                        n = this.html_generate_array[this.reg_array.indexOf(r)]
                                        .replace("{text}", a[2])
                                        .replace("id", a[1]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: [
                                    "!\\[(.+)\\]\\((.+)\\s+(.+)\\)",
                                    "!\\[(.+)\\]\\((.+)\\)",
                                ],
                                html_generate_array: [
                                    '<img src="#url" alt="#alt" title="#title">',
                                    '<img src="#url" alt="#alt">',
                                ],
                                description: "",
                                example: "<#id-链接>",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t);
                                    console.log(a);
                                    var n = this.html_generate_array[this.reg_array.indexOf(r)]
                                        .replace("#url", a[2])
                                        .replace("#alt", a[1])
                                        .replace("#title", a[3]);
                                    return e.replace(a[0], n);
                                },
                            },
                            {
                                reg_array: ["<url=(.*)-(.+)"],
                                html_generate_array: [
                                    '<a href="id" style=" text-decoration: none;">{text}</a>',
                                ],
                                description: "[锚点链接, 锚点注入点id默认div包裹]",
                                example: "<#id-链接>",
                                parse_generate: function(e, r) {
                                    var t = new RegExp(r),
                                        a = e.match(t),
                                        n = this.html_generate_array[this.reg_array.indexOf(r)]
                                        .replace("{text}", a[2])
                                        .replace("id", a[1]);
                                    return e.replace(a[0], n);
                                },
                            },
                        ];
                    e.exports = function(e) {
                        var n = !0,
                            i = !1,
                            l = void 0;
                        try {
                            for (
                                var p, o = a[Symbol.iterator](); !(n = (p = o.next()).done); n = !0
                            ) {
                                var s = p.value;
                                if (new RegExp(s.pre_label).test(e.data)) {
                                    var c = s.parse_generate(e),
                                        u = t(r);
                                    c = c.replace(r, u);
                                    break;
                                }
                            }
                        } catch (e) {
                            (i = !0), (l = e);
                        } finally {
                            try {
                                !n && o.return && o.return();
                            } finally {
                                if (i) throw l;
                            }
                        }
                        return void 0 === c && (c = t(e.data)), c;
                    };
                },
                326: (e, r, t) => {
                    var a = (function() {
                            function e(e, r) {
                                for (var t = 0; t < r.length; t++) {
                                    var a = r[t];
                                    (a.enumerable = a.enumerable || !1),
                                    (a.configurable = !0),
                                    "value" in a && (a.writable = !0),
                                        Object.defineProperty(e, a.key, a);
                                }
                            }
                            return function(r, t, a) {
                                return t && e(r.prototype, t), a && e(r, a), r;
                            };
                        })(),
                        n = t(690),
                        i = (function() {
                            function e(r) {
                                if (
                                    ((function(e, r) {
                                            if (!(e instanceof r))
                                                throw new TypeError("Cannot call a class as a function");
                                        })(this, e),
                                        void 0 !== r)
                                ) {
                                    var t = this.el(r);
                                    document.getElementById(r.el).innerHTML = t;
                                }
                            }
                            return (
                                a(e, [{
                                        key: "data_dispose",
                                        value: function(e) {
                                            return e.replace(
                                                /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
                                                ""
                                            );
                                        },
                                    },
                                    {
                                        key: "created",
                                        value: function(e) {
                                            return e;
                                        },
                                    },
                                    {
                                        key: "parse",
                                        value: function(e) {
                                            var r = e.split(" ")[0];
                                            return { data: e, pre_label: r };
                                        },
                                    },
                                    {
                                        key: "generate",
                                        value: function(e) {
                                            return n(e);
                                        },
                                    },
                                    {
                                        key: "life_cycle",
                                        value: function(e) {
                                            e = this.data_dispose(e);
                                            var r = this.created(e),
                                                t = this.parse(r);
                                            return this.generate(t);
                                        },
                                    },
                                    {
                                        key: "el",
                                        value: function(e) {
                                            var r = "";
                                            if (/\|\|\|\|\|\|/.test(e)) {
                                                var t = e.split("||||||");
                                                for (var a in t) r = r + this.life_cycle(t[a]) + "<br>";
                                            } else r = this.life_cycle(e);
                                            return r;
                                        },
                                    },
                                ]),
                                e
                            );
                        })();
                    e.exports = i;
                },
            },
            r = {};
        return (function t(a) {
            var n = r[a];
            if (void 0 !== n) return n.exports;
            var i = (r[a] = { exports: {} });
            return e[a](i, i.exports, t), i.exports;
        })(326);
    })();
})();